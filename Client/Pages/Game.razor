@page "/game"
@using BlazorPro.Spinkit
@using Radzen.Blazor
@inject IGameState gameState
@inject NavigationManager navigationManager

<PageTitle>ZapWord</PageTitle>

<SpinLoader IsLoading="@(!gameState.GameActive)">
    <LoadingTemplate>
        <div class="modal-overlay">
            <Grid Center="true" />
        </div>
    </LoadingTemplate>

    <ContentTemplate>

        <div class="container py-2 source-code-pro" style="zoom: 1;">

            @* PROGRESS BAR *@
            <div class="row justify-content-center py-2">
                <div class="col-6 col-offset-3">
                    <RadzenProgressBar ShowValue="false" Value="@(gameState.Progress)" />
                </div>
            </div>

            @* AVAILABLE LETTERS *@
            <div class="row justify-content-center py-3">
                <div class="col-auto" style="white-space: nowrap;">
                    @* EACH CLICKABLE LETTER *@
                    @foreach (var letter_item in gameState.AvailableLetters)
                    {
                        var button_state = (gameState.CurrentWordState == WordState.ewsGameOver ? "btn-success" : "btn-primary");
                        var (letter, available) = letter_item.Value;
                        @if (available)
                        {
                            <button type="button" class="btn @button_state mx-1" disabled="@LetterChoiceButtonDisabled()" @onclick="(() => gameState.UseLetter(letter_item.Key))">
                                @(letter.ToString().ToUpper())
                            </button>
                        }
                        else
                        {
                            <button type="button" class="btn btn-outline-primary mx-1">
                                &nbsp;
                            </button>
                        }
                    }
                </div>
            </div>

            @* MAIN GAME BUTTONS *@
            <div class="row justify-content-center py-3">
                <div class="col-auto">
                    <div class="row flex-nowrap justify-content-center">
                        <div class="col-auto">
                            @if (gameState.TypedLetters.Count() == 0)
                            {
                                @* SHUFFLE BUTTON *@
                                <button type="button" class="btn btn-info" style="width: 80px;" disabled="@ShuffleButtonDisabled()" @onclick="(() => gameState.Shuffle())">
                                    <i class="fa-solid fa-shuffle"></i>
                                </button>
                            }
                            else
                            {
                                @* ACCEPT BUTTON *@
                                <button type="button" class="btn btn-success" style="width: 80px;" disabled="@WordAcceptButtonDisabled()" @onclick="(() => gameState.FinishWord())">
                                    <i class="fa-solid fa-circle-check"></i>
                                </button>
                            }
                        </div>
                        <div class="col-auto">
                            @* GIVE UP BUTTON *@
                            <button type="button" class="btn btn-danger" style="width: 80px;" disabled="@GiveUpButtonDisabled()" @onclick="(() => gameState.GiveUp())">
                                <i class="fa-solid fa-flag"></i>
                            </button>
                        </div>
                        <div class="col-auto">
                            @* GAME RESET BUTTON *@
                            <button type="button" class="btn btn-warning" style="width: 80px;" @onclick="(() => gameState.ResetGame())">
                                <i class="fa-solid fa-rotate"></i>
                            </button>
                        </div>
                    </div>
                </div>
            </div>

            <div class="py-3"></div>

            @* TYPED LETTERS *@
            @if (gameState.CurrentWordState != WordState.ewsGameOver)
            {
                <div class="row flex-nowrap py-2">

                    @* TYPING AREA *@
                    <div class="col-auto" style="white-space: nowrap;">
                        @{
                            var letter_count = 0;
                            var need_space = true;
                            var button_state = gameState.CurrentWordState switch
                            {
                                WordState.ewsTyping => "btn-primary",
                                WordState.ewsWrong => "btn-danger",
                                _ => null
                            };
                        }

                        @* EACH TYPED LETTER *@
                        @foreach (var letter in gameState.TypedLetters)
                        {
                            letter_count++;
                            <button type="button" class="btn btn-sm @button_state mx-1" @onclick="(() => gameState.DeleteLetter(letter.Index))">
                                @(letter.Letter.ToString().ToUpper())
                            </button>
                        }

                        @* CURRENT HINT SPACES *@
                        @for (var pos = letter_count; pos < gameState.CurrentHint?.Word.Length; pos++)
                        {
                            need_space = false;
                            <button type="button" class="btn btn-sm btn-outline-success mx-1">
                                &nbsp;
                            </button>
                        }

                        @* NEXT LETTER SPACE *@
                        @if (need_space && (gameState.TypedLetters.Count() < gameState.GameData!.MaxWordSize))
                        {
                            <button type="button" class="btn btn-sm btn-outline-primary mx-1">
                                &nbsp;
                            </button>
                        }
                    </div>
                </div>

                @* WORD HINT *@
                <div class="row flex-nowrap align-items-center">
                    <div class="col-auto justify-content-end" style="font-size: xx-large;">
                        <button type="button" class="btn btn-sm btn-primary mx-1" @onclick="(() => gameState.NextHint())">
                            <span style="font-weight:bolder;">
                                &#x21bb;
                            </span>
                        </button>
                    </div>
                    <div class="col-auto" style="white-space: normal; width: 85%; font-size: smaller;">
                        <strong>
                            @(gameState.CurrentHint?.Category)
                        </strong>
                        :&nbsp;
                        @(gameState.CurrentHint?.Description)
                    </div>
                </div>
            }

            @* LIST OF COMPLETED WORDS *@
            @foreach (var correct_word in gameState.CorrectWords)
            {
                <div class="py-2"></div>
                <div class="row flex-nowrap py-2" style="border-top: solid 2px black; border-style: dashed none none none;">
                    <div class="col-12" style="white-space: nowrap;">
                        @{
                            var button_state = (gameState.MissedWords.Contains(correct_word) ? "btn-danger" : "btn-success");
                        }

                        @* EACH LETTER OF THE WORD *@
                        @foreach (var letter in correct_word)
                        {
                            <button type="button" class="btn btn-sm @button_state mx-1">
                                @(letter.ToString().ToUpper())
                            </button>
                        }
                    </div>
                </div>
                <div class="row flex-nowrap align-items-center">
                    <div class="col-auto">
                        &nbsp;
                    </div>

                    @* DEFINITIONS *@
                    <div class="col-auto" style="white-space: normal; width: 85%; font-size: smaller; max-height: 150pt; overflow-y: auto;">
                        @foreach (var semantic in gameState.GameData!.Words[correct_word].OrderBy(s => s.Category))
                        {
                            <strong>
                                @(semantic.Category)
                            </strong>
                            <text>:&nbsp;</text>
                            @(semantic.Description)
                            <br />
                        }
                    </div>
                </div>
            }

            <div class="py-3"></div>
        </div>

    </ContentTemplate>
</SpinLoader>

@code {
    protected override async Task OnInitializedAsync()
    {
        if (gameState.GameRequested)
        {
            await gameState.NewGame();
        }
    }

    private bool LetterChoiceButtonDisabled() =>
    (gameState.CurrentWordState == WordState.ewsGameOver);

    private bool ShuffleButtonDisabled() =>
    (gameState.TypedLetters.Count() > 0) ||
    (gameState.CurrentWordState != WordState.ewsTyping);

    private bool GiveUpButtonDisabled() =>
    (gameState.CurrentWordState == WordState.ewsGameOver);

    private bool WordAcceptButtonDisabled() =>
    (gameState.CurrentWordState != WordState.ewsTyping) ||
    (gameState.TypedLetters.Count() < gameState.GameData!.MinWordSize);
}
