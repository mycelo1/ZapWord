@page "/game"
@inject IGameState gameState
@inject NavigationManager navigationManager

<PageTitle>ZapWord</PageTitle>

@if (gameState.GameActive)
{
    <div class="container py-2 source-code-pro" style="zoom: 0.75;">

        @* AVAILABLE LETTERS *@
        <div class="row justify-content-center py-2">
            <div class="col-auto" style="white-space: nowrap;">
                @* EACH CLICKABLE LETTER *@
                @foreach (var letter in gameState.AvailableLetters)
                {
                    @if (letter.Value.Available)
                    {
                        <button type="button" class="btn btn-primary mx-1" disabled="@LetterChoiceButtonDisabled()" @onclick="(() => gameState.UseLetter(letter.Key))">
                            @(letter.Value.Letter.ToString().ToUpper())
                        </button>
                    }
                    else
                    {
                        <button type="button" class="btn btn-outline-primary mx-1">
                            &nbsp;
                        </button>
                    }
                }
            </div>
        </div>

        @* MAIN GAME BUTTONS *@
        <div class="row justify-content-center py-3">
            <div class="col-auto">
                <div class="row flex-nowrap justify-content-center">
                    <div class="col-auto">
                        @* SHUFFLE BUTTON *@
                        <button type="button" class="btn btn-info" style="width: 80px;" disabled="@ShufleButtonDisabled()" @onclick="(() => gameState.Shuffle())">
                            <span style="font-size:large; font-weight: bolder;">
                                &#x21c6;
                            </span>
                        </button>
                    </div>
                    <div class="col-auto">
                        @* GAME RESET BUTTON *@
                        <button type="button" class="btn btn-warning" style="width: 80px;" @onclick="(() => gameState.ResetGame())">
                            <span style="font-size: large; font-weight: bolder;">
                                &#x27f3;
                            </span>
                        </button>
                    </div>
                </div>
            </div>
        </div>

        <div class="py-3"></div>

        @* TYPED LETTERS *@
        @if (gameState.CurrentWordState != WordState.ewsGameOver)
        {
            <div class="row flex-nowrap py-2">

                @* ACCEPT BUTTON *@
                <div class="col-auto">
                    <button type="button" class="btn btn-sm btn-dark mx-1" disabled="@WordAcceptButtonDisabled()" @onclick="(() => gameState.FinishWord())">
                        <span style="font-weight:bolder;">
                            &#x2714;
                        </span>
                    </button>
                </div>

                @* TYPING AREA *@
                <div class="col-auto gx-0" style="white-space: nowrap;">
                    @{
                        var button_state = gameState.CurrentWordState switch
                        {
                            WordState.ewsTyping => "btn-primary",
                            WordState.ewsWrong => "btn-danger",
                            _ => null
                        };
                    }

                    @* EACH TYPED LETTER *@
                    @foreach (var letter in gameState.TypedLetters)
                    {
                        <button type="button" class="btn btn-sm @button_state mx-1" @onclick="(() => gameState.DeleteLetter(letter.Index))">
                            @(letter.Letter.ToString().ToUpper())
                        </button>
                    }

                    @* NEXT LETTER SPACE *@
                    @if ((gameState.CurrentWordState == WordState.ewsTyping) && (gameState.TypedLetters.Count() < gameState.GameData!.MaxWordSize))
                    {
                        <button type="button" class="btn btn-sm btn-outline-primary mx-1">
                            &nbsp;
                        </button>
                    }
                </div>
            </div>

            @* WORD HINT *@
            <div class="row flex-nowrap align-items-center">
                <div class="col-auto justify-content-end" style="font-size: xx-large;">
                    <button type="button" class="btn btn-sm btn-primary mx-1">
                        <span style="font-weight:bolder;">
                            &#x21bb;
                        </span>
                    </button>
                </div>
                <div class="col-auto" style="white-space: normal; width: 85%; font-size: smaller;">
                    <strong>noum:</strong>&nbsp;the act of agitating something; causing it to move around (usually
                    vigorously)
                </div>
            </div>
        }
    </div>
}
else
{
    <p><em>Loading...</em></p>
}

@code {
    protected override async Task OnInitializedAsync()
    {
        if (gameState.GameRequested)
        {
            await gameState.NewGame();
        }
    }

    private bool LetterChoiceButtonDisabled() =>
    (gameState.CurrentWordState != WordState.ewsTyping);

    private bool ShufleButtonDisabled() =>
    (gameState.TypedLetters.Count() > 0) ||
    (gameState.CurrentWordState != WordState.ewsTyping);

    private bool WordAcceptButtonDisabled() =>
    (gameState.CurrentWordState != WordState.ewsTyping) ||
    (gameState.TypedLetters.Count() < gameState.GameData!.MinWordSize);
}
